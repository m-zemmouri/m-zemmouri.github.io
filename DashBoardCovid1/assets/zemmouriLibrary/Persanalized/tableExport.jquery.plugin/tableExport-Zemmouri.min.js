!function (e) { e.fn.extend({ tableExport: function (t) { function n(e) { return e.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1") } function a(e, t, a) { return e.replace(new RegExp(n(t), "g"), a) } function o(e, t, n) { var o = "", s = i(e, t, n), r = null === s || "" == s ? "" : s.toString(); return s instanceof Date ? o = c.csvEnclosure + s.toLocaleString() + c.csvEnclosure : (o = a(r, c.csvEnclosure, c.csvEnclosure + c.csvEnclosure), (o.indexOf(c.csvSeparator) >= 0 || /[\r\n ]/g.test(o)) && (o = c.csvEnclosure + o + c.csvEnclosure)), o } function i(t, n, a) { var o = e(t); return "true" == c.htmlContent ? content_data = o.html().trim() : content_data = o.text().trim().replace(/\u00AD/g, ""), "true" == c.escape && (content_data = escape(content_data)), "function" == typeof c.onCellData && (content_data = c.onCellData(o, n, a, content_data)), content_data } function s(e, t) { var n = document.createElement("a"); n && (document.body.appendChild(n), n.style = "display: none", n.download = e, n.href = t, document.createEvent ? (null == f && (f = document.createEvent("MouseEvents")), f.initEvent("click", !0, !1), n.dispatchEvent(f)) : document.createEventObject ? n.fireEvent("onclick") : "function" == typeof n.onclick && n.onclick(), document.body.removeChild(n)) } function r(e) { e = e.replace(/\x0d\x0a/g, "\n"); for (var t = "", n = 0; n < e.length; n++) { var a = e.charCodeAt(n); 128 > a ? t += String.fromCharCode(a) : a > 127 && 2048 > a ? (t += String.fromCharCode(a >> 6 | 192), t += String.fromCharCode(63 & a | 128)) : (t += String.fromCharCode(a >> 12 | 224), t += String.fromCharCode(a >> 6 & 63 | 128), t += String.fromCharCode(63 & a | 128)) } return t } function l(e) { var t, n, a, o, i, s, l, c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", d = "", f = 0; for (e = r(e) ; f < e.length;) t = e.charCodeAt(f++), n = e.charCodeAt(f++), a = e.charCodeAt(f++), o = t >> 2, i = (3 & t) << 4 | n >> 4, s = (15 & n) << 2 | a >> 6, l = 63 & a, isNaN(n) ? s = l = 64 : isNaN(a) && (l = 64), d = d + c.charAt(o) + c.charAt(i) + c.charAt(s) + c.charAt(l); return d } var c = { csvSeparator: ",", csvEnclosure: '"', onCellData: null, ignoreColumn: [], displayTableName: "false", theadSelector: "tr", tbodySelector: "tr", tableName: "myTableName", worksheetName: "xlsWorksheetName", type: "csv", dpi: 0, pdfLeftMargin: 20, escape: "false", htmlContent: "false", consoleLog: "false", outputMode: "file", fileName: "tableExport", excelstyles: ["border-bottom", "border-top", "border-left", "border-right"] }, t = e.extend(!0, c, t), d = this, f = null; if ("csv" == c.type || "txt" == c.type) { var h = "", p = 0; if (e(d).find("thead").find(c.theadSelector).each(function () { h += "\n", e(this).filter(":visible").find("th").each(function (t, n) { "none" != e(this).css("display") && "none" != e(this).data("tableexport-display") && -1 == c.ignoreColumn.indexOf(t) && (h += o(this, p, t) + c.csvSeparator) }), p++, h = e.trim(h), h = e.trim(h).substring(0, h.length - 1) }), e(d).find("tbody").find(c.tbodySelector).each(function () { h += "\n", e(this).filter(":visible").find("td").each(function (t, n) { "none" != e(this).css("display") && "none" != e(this).data("tableexport-display") && -1 == c.ignoreColumn.indexOf(t) && (h += o(this, p, t) + c.csvSeparator) }), p++, h = e.trim(h).substring(0, h.length - 1) }), "true" == c.consoleLog && console.log(h), "string" == c.outputMode) return h; if ("base64" == c.outputMode) return l(h); try { var u = new Blob([("csv" == c.type ? "\ufeff" : "") + h], { type: "text/" + ("csv" == c.type ? "csv" : "plain") + ";charset=utf-8" }); saveAs(u, c.fileName + "." + c.type) } catch (m) { s(c.fileName + "." + c.type, "data:text/" + ("csv" == c.type ? "csv" : "plain") + ";charset=utf-8," + ("csv" == c.type ? "\ufeff" : "") + encodeURIComponent(h)) } } else if ("sql" == c.type) { var p = 0, h = "INSERT INTO `" + c.tableName + "` ("; if (e(d).find("thead").find(c.theadSelector).each(function () { e(this).filter(":visible").find("th").each(function (t, n) { "none" != e(this).css("display") && "none" != e(this).data("tableexport-display") && -1 == c.ignoreColumn.indexOf(t) && (h += "'" + i(this, p, t) + "',") }), p++, h = e.trim(h), h = e.trim(h).substring(0, h.length - 1) }), h += ") VALUES ", e(d).find("tbody").find(c.tbodySelector).each(function () { h += "(", e(this).filter(":visible").find("td").each(function (t, n) { "none" != e(this).css("display") && "none" != e(this).data("tableexport-display") && -1 == c.ignoreColumn.indexOf(t) && (h += "'" + i(this, p, t) + "',") }), p++, h = e.trim(h).substring(0, h.length - 1), h += ")," }), h = e.trim(h).substring(0, h.length - 1), h += ";", "true" == c.consoleLog && console.log(h), "string" == c.outputMode) return h; if ("base64" == c.outputMode) return l(h); try { var u = new Blob([h], { type: "text/plain;charset=utf-8" }); saveAs(u, c.fileName + ".sql") } catch (m) { s(c.fileName + ".sql", "data:application/sql;charset=utf-8," + encodeURIComponent(h)) } } else if ("json" == c.type) { var y = []; e(d).find("thead").find(c.theadSelector).each(function () { var t = [], n = 0; e(this).filter(":visible").find("th").each(function (a, o) { "none" != e(this).css("display") && "none" != e(this).data("tableexport-display") && -1 == c.ignoreColumn.indexOf(a) && t.push(i(this, n, a)) }), n++, y.push(t) }); var v = []; e(d).find("tbody").find(c.tbodySelector).each(function () { var t = []; e(this).filter(":visible").find("td").each(function (n, a) { "none" != e(this).css("display") && "none" != e(this).data("tableexport-display") && -1 == c.ignoreColumn.indexOf(n) && t.push(i(this, p, n)) }), p++, v.push(t) }); var b = []; b.push({ header: y, data: v }); var x = JSON.stringify(b); if ("true" == c.consoleLog && console.log(x), "string" == c.outputMode) return x; var g = l(x); if ("base64" == c.outputMode) return g; try { var u = new Blob([x], { type: "application/json;charset=utf-8" }); saveAs(u, c.fileName + ".json") } catch (m) { s(c.fileName + ".json", "data:application/json;charset=utf-8;base64," + g) } } else if ("xml" == c.type) { var p = 0, C = '<?xml version="1.0" encoding="utf-8"?>'; C += "<tabledata><fields>", e(d).find("thead").find(c.theadSelector).each(function () { e(this).filter(":visible").find("th").each(function (t, n) { "none" != e(this).css("display") && "none" != e(this).data("tableexport-display") && -1 == c.ignoreColumn.indexOf(t) && (C += "<field>" + i(this, p, t) + "</field>") }), p++ }), C += "</fields><data>"; var N = 1; if (e(d).find("tbody").find(c.tbodySelector).each(function () { C += '<row id="' + N + '">'; var t = 0; e(this).filter(":visible").find("td").each(function (n, a) { "none" != e(this).css("display") && "none" != e(this).data("tableexport-display") && -1 == c.ignoreColumn.indexOf(n) && (C += "<column-" + t + ">" + i(this, p, n) + "</column-" + t + ">"), t++ }), N++, p++, C += "</row>" }), C += "</data></tabledata>", "true" == c.consoleLog && console.log(C), "string" == c.outputMode) return C; var g = l(C); if ("base64" == c.outputMode) return g; try { var u = new Blob([C], { type: "application/xml;charset=utf-8" }); saveAs(u, c.fileName + ".xml") } catch (m) { s(c.fileName + ".xml", "data:application/xml;charset=utf-8;base64," + g) } } else if ("excel" == c.type || "doc" == c.type) { var p = 0, E = "<table>"; e(d).find("thead").find(c.theadSelector).each(function () { E += "<tr>", e(this).filter(":visible").find("th,td").each(function (t, n) { if ("none" != e(this).css("display") && "none" != e(this).data("tableexport-display") && -1 == c.ignoreColumn.indexOf(t)) { E += "<td style='"; for (var a in c.excelstyles) c.excelstyles.hasOwnProperty(a) && (E += c.excelstyles[a] + ": " + e(this).css(c.excelstyles[a]) + ";"); E += "'>" + i(this, p, t) + "</td>" } }), p++, E += "</tr>" }); var N = 1; e(d).find("tbody").find(c.tbodySelector).each(function () { E += "<tr>"; var t = 0; e(this).filter(":visible").find("td").each(function (n, a) { if ("none" != e(this).css("display") && "none" != e(this).data("tableexport-display") && -1 == c.ignoreColumn.indexOf(n)) { E += "<td style='"; for (var o in c.excelstyles) c.excelstyles.hasOwnProperty(o) && (E += c.excelstyles[o] + ": " + e(this).css(c.excelstyles[o]) + ";"); e(this).is("[colspan]") && (E += "' colspan='" + e(this).attr("colspan")), E += "'>" + i(this, p, n) + "</td>" } t++ }), N++, p++, E += "</tr>" }), c.displayTableName && (E += "<tr><td></td></tr><tr><td></td></tr><tr><td>" + i(e("<p>" + c.tableName + "</p>")) + "</td></tr>"), E += "</table>", "true" == c.consoleLog && console.log(E); var S = "<html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:x='urn:schemas-microsoft-com:office:" + c.type + "' xmlns='http://www.w3.org/TR/REC-html40'>"; if (S += '<meta http-equiv="content-type" content="application/vnd.ms-' + c.type + '; charset=UTF-8">', S += '<meta http-equiv="content-type" content="application/', S += "excel" == c.type ? "vnd.ms-excel" : "msword", S += '; charset=UTF-8">', S += "<head>", "excel" == c.type && (S += "<!--[if gte mso 9]>", S += "<xml>", S += "<x:ExcelWorkbook>", S += "<x:ExcelWorksheets>", S += "<x:ExcelWorksheet>", S += "<x:Name>", S += c.worksheetName, S += "</x:Name>", S += "<x:WorksheetOptions>", S += "<x:DisplayGridlines/>", S += "</x:WorksheetOptions>", S += "</x:ExcelWorksheet>", S += "</x:ExcelWorksheets>", S += "</x:ExcelWorkbook>", S += "</xml>", S += "<![endif]-->"), S += "</head>", S += "<body>", S += E, S += "</body>", S += "</html>", "string" == c.outputMode) return S; var g = l(S); if ("base64" == c.outputMode) return g; var w = "excel" == c.type ? "xls" : "doc"; try { var u = new Blob([S], { type: "application/vnd.ms-" + c.type }); saveAs(u, c.fileName + "." + w) } catch (m) { s(c.fileName + "." + w, "data:application/vnd.ms-" + c.type + ";base64," + g) } } else if ("png" == c.type) html2canvas(e(d), { onrendered: function (e) { var t = e.toDataURL(); t = t.substring(22); for (var n = atob(t), a = new ArrayBuffer(n.length), o = new Uint8Array(a), i = 0; i < n.length; i++) o[i] = n.charCodeAt(i); try { var r = new Blob([a], { type: "image/png" }); saveAs(r, c.fileName + ".png") } catch (l) { s(c.fileName + ".png", "data:image/png;base64," + t) } } }); else if ("pdf" == c.type) { var A = new jsPDF("p", "pt", "letter"), O = e(d).parent()[0]; specialElementHandlers = { "#bypassme": function (e, t) { return !0 } }, margins = { top: 80, bottom: 60, left: 40, width: 522 }, A.fromHTML(O, margins.left, margins.top, { width: margins.width, elementHandlers: specialElementHandlers }, function (e) { A.save(c.fileName + ".pdf") }, margins) } } }) }(jQuery);